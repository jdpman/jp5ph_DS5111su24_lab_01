#makefile

default:test

env:
	python3 -m venv env; . env/bin/activate ; pip install --upgrade pip

update: env
	. env/bin/activate; pip install -r requirements.txt

test: lint
	. env/bin/activate; pytest -vvx tests
lint:
	. env/bin/activate && pylint tokenizer.py


# Target to ensure result.csv is generated by depending on clean_content.csv
all:
	result.csv

# Rule to download raw text and create download_raw_text.log
download_raw_text.log:
	@echo "running the download script..."
	bash get_the_books.sh
	@echo "download complete!"

# Rule to clean the content and create clean_content.csv
clean_content.csv:
	download_raw_text.log
	@echo "cleaning content..."
	cat pg*.txt | tr -d '\r\n' | tr ' ' '\n' | sort | uniq > clean_content.csv
	@echo "cleaning complete!"

# Rule to run th emodel and store results in result.csv
result.csv:
	clean_content.csv
	@echo "running model..."
	wc -l clean_content.csv > result.csv
	wc -w clean_content.csv >> result.csv
	@echo "model run complete!"

# Rule to count the number of lines in The Raven (pg17192.txt)
raven_line_count:
	@echo "counting lines in The Raven (pg17192.txt)..."
	wc -l pg17192.txt

# rule to count occurrences of 'raven' in The Raven (pg17192.txt)
raven_counts:
	@echo "counting lines with 'raven' (case-sensitive and case-insensitive) in The Raven (pg17192.txt)..."
	@echo "raven (lowercase):"
	grep -c 'raven' pg17192.txt
	@echo "Raven (title case):"
	grep -c 'Raven' pg.17192.txt
	@echo "raven (case-insensitive):"
	grep -i -c 'raven' pg17192.txt

# Rule to count the total number of lines in all downloaded files
total_lines:
	@echo "Counting total lines in all downloaded files..."
	wc -l *.txt | tail -n 1

# Rule to count the total number of words in all downloaded files
total_words:
	@echo "Counting total words in all downloaded files..."
	wc -w *.txt | tail -n 1

#Rule to clean up the generated files
clean:
	@echo "cleaning up..."
	rm -f download_raw_text.log clean_content.csv result.csv pg*.txt
	@echo "cleanup complete."

# List of text files to process
TEXT_FILES = pg1063.txt pg1064.txt pg2151.txt pg10031.txt pg10947.txt pg15143.txt pg17192.txt pg25525.txt pg32037.txt pg51060.txt

# Create logs directory if it does not exist
prepare-logs-dir:
	@mkdir -p logs

# Target to run non-integration tests
test: prepare-logs-dir
	pytest -m "not integration" --log-file=./logs/pytest.log

# Target to run integration tests
test-integration: prepare-logs-dir
	pytest -m "integration" --log-file=./logs/pytest.log

# Phony targets
.PHONY: install test test test-integration est all clean raven_line_count raven_word_count raven_counts total_lines total_words setup process_files




