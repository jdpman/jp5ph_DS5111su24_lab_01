# Default target to display the Makefile content
default:
	@cat Makefile

# Define the virtual environment directory
VENV_DIR = venv

# Define the python interpreter to use for creating the virtual environment
PYTHON = python3

# Define the commands to create and activate the virtual environment
CREATE_VENV = $(PYTHON) -m venv $(VENV_DIR)
ACTIVATE_VENV = . $(VENV_DIR)/bin/activate

# Define the command to install pytest in the virtual environment
INSTALL_PYTEST = $(VENV_DIR)/bin/pip install pytest

# Define the command to run pytest in the virtual environment
RUN_PYTEST = $(VENV_DIR)/bin/pytest

# Target to create the virtual environment
$(VENV_DIR):
	$(CREATE_VENV)

# Target to install pytest in the virtual environment
install: $(VENV_DIR)
	$(ACTIVATE_VENV) && $(INSTALL_PYTEST)

# Target to run pytest
test: install
	$(ACTIVATE_VENV) && $(RUN_PYTEST)

# Phony targets
.PHONY: install test

# Target to ensure result.csv is generated by depending on clean_content.csv
all: 
	result.csv

# Rule to download raw text and create download_raw_text.log
download_raw_text.log:
	@echo "Running the download script..."
	bash get_the_books.sh
	@echo "Download complete."

# Rule to clean the content and create clean_content.csv
clean_content.csv: 
	download_raw_text.log
	@echo "Cleaning content..."
	# Replace with actual text cleaning commands
	cat pg*.txt | tr -d '\r\n' | tr ' ' '\n' | sort | uniq > clean_content.csv
	@echo "Cleaning complete."

# Rule to run the model and store results in result.csv
result.csv:
	clean_content.csv
	@echo "Running model..."
	# Replace with actual model running command
	wc -l clean_content.csv > result.csv
	wc -w clean_content.csv >> result.csv
	@echo "Model run complete."

# Rule to count the number of lines in The Raven (pg17192.txt)
raven_line_count:
	@echo "Counting lines in The Raven (pg17192.txt)..."
	wc -l pg17192.txt

# Rule to count the number of words in The Raven (pg17192.txt)
raven_word_count:
	@echo "Counting words in The Raven (pg17192.txt)..."
	wc -w pg17192.txt

# Rule to count occurrences of 'raven' in The Raven (pg17192.txt)
raven_counts:
	@echo "Counting lines with 'raven' (case-sensitive and case-insensitive) in The Raven (pg17192.txt)..."
	@echo "raven (lowercase):"
	grep -c 'raven' pg17192.txt
	@echo "Raven (title case):"
	grep -c 'Raven' pg17192.txt
	@echo "raven (case-insensitive):"
	grep -i -c 'raven' pg17192.txt

# Rule to count the total number of lines in all downloaded files
total_lines:
	@echo "Counting total lines in all downloaded files..."
	wc -l *.txt | tail -n 1

# Rule to count the total number of words in all downloaded files
total_words:
	@echo "Counting total words in all downloaded files..."
	wc -w *.txt | tail -n 1

# Rule to clean up the generated files
clean:
	@echo "Cleaning up..."
	rm -f download_raw_text.log clean_content.csv result.csv pg*.txt
	@echo "Cleanup complete."

# Phony targets to avoid conflicts with files of the same name
.PHONY: 
	all clean raven_line_count raven_word_count raven_counts total_lines total_words setup process_files

# List of text files to process
TEXT_FILES = pg1063.txt pg1064.txt pg2151.txt pg10031.txt pg10947.txt \
pg15143.txt pg17192.txt pg25525.txt pg32037.txt pg51060.txt

# Virtual environment setup and Python script processing
setup:
	python3 -m venv $(VENV_DIR) && \
	$(ACTIVATE_VENV) && \
	python -m pip install --upgrade pip && \
	pip install -r requirements.txt

process_files: setup download_raw_text.log
	$(ACTIVATE_VENV) && \
	for file in $(TEXT_FILES); do \
		python process_text_file.py $$file; \
	done

# Run tokenizer.py example
tokenizer: setup
	$(ACTIVATE_VENV) && \
	python tokenizer.py
       







